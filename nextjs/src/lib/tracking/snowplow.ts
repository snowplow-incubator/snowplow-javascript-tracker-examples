// Automatically generated by Snowtype

type Cart = any;

type CheckoutStep = any;

type Promotion = any;

type Refund = any;

type TransactionError = any;

/**
 * Schema for an Ecommerce action
 */
export interface SnowplowEcommerceAction {
    /**
     * The name of the list presented to the user E.g. product list, search results, shop the
     * look, frequently bought with.
     */
    name?: null | string;
    /**
     * Standard ecommerce actions.
     */
    type: Type;
}

/**
 * Standard ecommerce actions.
 */
export type Type = "add_to_cart" | "remove_from_cart" | "product_view" | "list_click" | "list_view" | "promo_click" | "promo_view" | "checkout_step" | "transaction" | "refund" | "trns_error";

/**
 * Schema for a product entity in Ecommerce
 */
export interface Product {
    /**
     * The brand of the product.
     */
    brand?: null | string;
    /**
     * The category the product belongs to. Use a consistent separator to express multiple
     * levels. E.g. Woman/Shoes/Sneakers
     */
    category: string;
    /**
     * Identifier/Name/Url for the creative presented on a list or product view.
     */
    creative_id?: null | string;
    /**
     * The currency in which the product is being priced (ISO 4217).
     */
    currency: string;
    /**
     * The SKU or product ID.
     */
    id: string;
    /**
     * The inventory status of the product E.g. in stock, out of stock, preorder, backorder.
     */
    inventory_status?: null | string;
    /**
     * The list or recommended retail price of a product.
     */
    list_price?: number | null;
    /**
     * The name or title of the product.
     */
    name?: null | string;
    /**
     * The position the product was presented in a list of products E.g. search results, product
     * list page.
     */
    position?: number | null;
    /**
     * The price of the product at the current time.
     */
    price: number;
    /**
     * The quantity of the product taking part in the ecommerce action.
     */
    quantity?: number | null;
    /**
     * The size of the product.
     */
    size?: null | string;
    /**
     * The variant of the product.
     */
    variant?: null | string;
}

/**
 * Schema for a transaction entity in Ecommerce
 */
export interface Transaction {
    /**
     * Whether the transaction is a credit order or not.
     */
    credit_order?: boolean | null;
    /**
     * The currency used for the transaction (ISO 4217).
     */
    currency: string;
    /**
     * Discount amount taken off.
     */
    discount_amount?: number | null;
    /**
     * Discount code used.
     */
    discount_code?: null | string;
    /**
     * The payment method used for the transaction.
     */
    payment_method: string;
    /**
     * The revenue of the transaction.
     */
    revenue: number;
    /**
     * Total cost of shipping on the transaction.
     */
    shipping?: number | null;
    /**
     * Total amount of tax on the transaction.
     */
    tax?: number | null;
    /**
     * Total quantity of items in the transaction.
     */
    total_quantity: number;
    /**
     * The ID of the transaction.
     */
    transaction_id: string;
}

/**
 * Schema for a Hotjar user entity. More info at
 * https://help.hotjar.com/hc/en-us/articles/115011669147
 */
export interface User {
    /**
     * The time reported for the user ID value creation time.
     */
    created_at?: number | null;
    /**
     * The cookie value of the Hotjar user ID cookie. The format is currently
     * _hjSessionUser_{site_id}
     */
    user_cookie_value?: null | string;
    /**
     * Hotjar user ID.
     */
    user_id?: null | string;
}

/**
 * Schema for a git release entity.
 */
export interface Release {
    /**
     * The git SHA of the commit the release is based on.
     */
    commit_sha?: null | string;
    /**
     * The release version identifier.
     */
    id?: null | string;
    /**
     * The git repository name the release refers to.
     */
    repository?: null | string;
}

import { trackSelfDescribingEvent, CommonEventProperties, SelfDescribingJson } from '@snowplow/browser-tracker';
import * as Ecom from "@snowplow/browser-plugin-snowplow-ecommerce";
/**
 * Creates a Snowplow Event Specification entity.
 */
export function createEventSpecification(eventSpecification: EventSpecification){
    return {
        schema:
            'iglu:com.snowplowanalytics.snowplow/event_specification/jsonschema/1-0-2',
        data: eventSpecification,
    }
}

/**
 * Automatically attached context for event specifications
 */
interface EventSpecification {
    id: string;
    name: string;
    data_product_id: string;
    data_product_name: string;
}


/**
 * Track a Snowplow event for SnowplowEcommerceAction.
 * Schema for an Ecommerce action
 */
export function trackSnowplowEcommerceAction<T extends {} = any>(snowplowEcommerceAction: SnowplowEcommerceAction & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = snowplowEcommerceAction;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snowplowanalytics.snowplow.ecommerce/snowplow_ecommerce_action/jsonschema/1-0-2',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow SnowplowEcommerceAction entity.
 */
export function createSnowplowEcommerceAction(snowplowEcommerceAction: SnowplowEcommerceAction){
    return {
        schema: 'iglu:com.snowplowanalytics.snowplow.ecommerce/snowplow_ecommerce_action/jsonschema/1-0-2',
        data: snowplowEcommerceAction
    }
}
/**
 * Track a Snowplow event for Product.
 * Schema for a product entity in Ecommerce
 */
export function trackProduct<T extends {} = any>(product: Product & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = product;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snowplowanalytics.snowplow.ecommerce/product/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Product entity.
 */
export function createProduct(product: Product){
    return {
        schema: 'iglu:com.snowplowanalytics.snowplow.ecommerce/product/jsonschema/1-0-0',
        data: product
    }
}
/**
 * Track a Snowplow event for Transaction.
 * Schema for a transaction entity in Ecommerce
 */
export function trackTransaction<T extends {} = any>(transaction: Transaction & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = transaction;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snowplowanalytics.snowplow.ecommerce/transaction/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Transaction entity.
 */
export function createTransaction(transaction: Transaction){
    return {
        schema: 'iglu:com.snowplowanalytics.snowplow.ecommerce/transaction/jsonschema/1-0-0',
        data: transaction
    }
}
/**
 * Track a Snowplow event for User.
 * Schema for a Hotjar user entity. More info at https://help.hotjar.com/hc/en-us/articles/115011669147
 */
export function trackUser<T extends {} = any>(user: User & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = user;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.hotjar/user/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow User entity.
 */
export function createUser(user: User){
    return {
        schema: 'iglu:com.hotjar/user/jsonschema/1-0-0',
        data: user
    }
}
/**
 * Track a Snowplow event for Release.
 * Schema for a git release entity.
 */
export function trackRelease<T extends {} = any>(release: Release & CommonEventProperties<T>, trackers?: string[]){
    const { context, timestamp, ...data } = release;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.git-scm/release/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow Release entity.
 */
export function createRelease(release: Release){
    return {
        schema: 'iglu:com.git-scm/release/jsonschema/1-0-0',
        data: release
    }
}

/**
 * Tracks a AddToCart event specification.
 * ID: 8d3a0faa-1077-47bf-82c7-7ade7c3633e9
 */
export function trackAddToCartSpec(addToCart: Ecom.Cart & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '8d3a0faa-1077-47bf-82c7-7ade7c3633e9',
        name: 'Add to cart',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(addToCart.context)
        ? [...addToCart.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedAddToCart = {
        ...addToCart,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackAddToCart(modifiedAddToCart, trackers);
}
/**
 * Tracks a CheckoutStep event specification.
 * ID: 0ed32b9f-5e91-4f85-a86c-0fff527fceeb
 */
export function trackCheckoutStepSpec(checkoutStep: Ecom.CheckoutStep & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '0ed32b9f-5e91-4f85-a86c-0fff527fceeb',
        name: 'Checkout step',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(checkoutStep.context)
        ? [...checkoutStep.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedCheckoutStep = {
        ...checkoutStep,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackCheckoutStep(modifiedCheckoutStep, trackers);
}
/**
 * Tracks a InternalPromotionClick event specification.
 * ID: 04f9b38c-c59e-4b6d-a1f0-53de1bc4816b
 */
export function trackInternalPromotionClickSpec(internalPromotionClick: Ecom.SPPromotion & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '04f9b38c-c59e-4b6d-a1f0-53de1bc4816b',
        name: 'Internal promotion click',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(internalPromotionClick.context)
        ? [...internalPromotionClick.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedInternalPromotionClick = {
        ...internalPromotionClick,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackPromotionClick(modifiedInternalPromotionClick, trackers);
}
/**
 * Tracks a InternalPromotionView event specification.
 * ID: 4798274b-6f2d-4b81-8485-1b9c2a05a2f8
 */
export function trackInternalPromotionViewSpec(internalPromotionView: Ecom.SPPromotion & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '4798274b-6f2d-4b81-8485-1b9c2a05a2f8',
        name: 'Internal promotion view',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(internalPromotionView.context)
        ? [...internalPromotionView.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedInternalPromotionView = {
        ...internalPromotionView,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackPromotionView(modifiedInternalPromotionView, trackers);
}
/**
 * Tracks a ProductListClick event specification.
 * ID: ad3e4812-5d79-4886-842c-f4ea68e8f68c
 */
export function trackProductListClickSpec(productListClick: Ecom.ListClickEvent & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'ad3e4812-5d79-4886-842c-f4ea68e8f68c',
        name: 'Product list click',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(productListClick.context)
        ? [...productListClick.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedProductListClick = {
        ...productListClick,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackProductListClick(modifiedProductListClick, trackers);
}
/**
 * Tracks a ProductListView event specification.
 * ID: 629c8220-9aa0-4784-8d41-d90f16f70dde
 */
export function trackProductListViewSpec(productListView: Ecom.ListViewEvent & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '629c8220-9aa0-4784-8d41-d90f16f70dde',
        name: 'Product list view',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(productListView.context)
        ? [...productListView.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedProductListView = {
        ...productListView,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackProductListView(modifiedProductListView, trackers);
}
/**
 * Tracks a Refund event specification.
 * ID: da7934c1-0a7f-4e1a-bce2-a0377e29ec0a
 */
export function trackRefundSpec(refund: Ecom.Refund & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'da7934c1-0a7f-4e1a-bce2-a0377e29ec0a',
        name: 'Refund',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(refund.context)
        ? [...refund.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedRefund = {
        ...refund,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackRefund(modifiedRefund, trackers);
}
/**
 * Tracks a RemoveFromCart event specification.
 * ID: bbbbf585-50b0-430d-8002-68a1c37d6fcc
 */
export function trackRemoveFromCartSpec(removeFromCart: Ecom.Cart & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'bbbbf585-50b0-430d-8002-68a1c37d6fcc',
        name: 'Remove from cart',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(removeFromCart.context)
        ? [...removeFromCart.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedRemoveFromCart = {
        ...removeFromCart,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackRemoveFromCart(modifiedRemoveFromCart, trackers);
}
/**
 * Tracks a TrackProductView event specification.
 * ID: 035b0ebc-0622-4a86-9941-97c48f2ab302
 */
export function trackTrackProductViewSpec(trackProductView: Ecom.Product & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '035b0ebc-0622-4a86-9941-97c48f2ab302',
        name: 'Track product view',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(trackProductView.context)
        ? [...trackProductView.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedTrackProductView = {
        ...trackProductView,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackProductView(modifiedTrackProductView, trackers);
}
/**
 * Tracks a Transaction event specification.
 * ID: cd6be759-7c66-4880-a727-3f33673cc843
 */
export function trackTransactionSpec(transaction: Ecom.SPTransaction & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'cd6be759-7c66-4880-a727-3f33673cc843',
        name: 'Transaction',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(transaction.context)
        ? [...transaction.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedTransaction = {
        ...transaction,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackTransaction(modifiedTransaction, trackers);
}
/**
 * Tracks a TransactionError event specification.
 * ID: e418304c-e22a-4ae8-b1a2-c69716ec21dd
 */
export function trackTransactionErrorSpec(transactionError: Ecom.TransactionError & Ecom.CommonEcommerceEventProperties, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: 'e418304c-e22a-4ae8-b1a2-c69716ec21dd',
        name: 'Transaction Error',
        data_product_id: '5dd51653-7605-4a3e-9208-2a9ba20b39aa',
        data_product_name: 'E-commerce Web - Snowplow Shoes'
    });

    const context = Array.isArray(transactionError.context)
        ? [...transactionError.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedTransactionError = {
        ...transactionError,
        context: context as unknown as SelfDescribingJson<Record<string, unknown>>[],
    };

    Ecom.trackTransactionError(modifiedTransactionError, trackers);
}

